import json
import os
import customtkinter as ctk
import pyperclip

# ------------------------
# Config
# ------------------------
DATA_FILE = "passwords.json"
MASTER_PASSWORD = "1234"  # you can change this

# ------------------------
# Helper Functions
# ------------------------
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r") as f:
        return json.load(f)

def save_data(data):
    with open(DATA_FILE, "w") as f:
        json.dump(data, f, indent=4)

# ------------------------
# Add Password Window
# ------------------------
def add_password(dash, refresh_callback):
    win = ctk.CTkToplevel(dash)
    win.title("Add New Entry")
    win.geometry("350x380")

    ctk.CTkLabel(win, text="Site Name").pack(pady=5)
    entry_site = ctk.CTkEntry(win, width=250)
    entry_site.pack()

    ctk.CTkLabel(win, text="Username").pack(pady=5)
    entry_user = ctk.CTkEntry(win, width=250)
    entry_user.pack()

    ctk.CTkLabel(win, text="Password").pack(pady=5)
    entry_pass = ctk.CTkEntry(win, width=250, show="*")
    entry_pass.pack()

    ctk.CTkLabel(win, text="Category").pack(pady=5)
    entry_cat = ctk.CTkEntry(win, width=250, placeholder_text="Work / Personal / Banking")
    entry_cat.pack()

    msg_label = ctk.CTkLabel(win, text="")
    msg_label.pack()

    # Save entry
    def save_entry():
        site = entry_site.get().strip()
        user = entry_user.get().strip()
        pwd = entry_pass.get().strip()
        cat = entry_cat.get().strip()

        if not site or not user or not pwd:
            msg_label.configure(text="‚ö†Ô∏è Site, Username & Password required!", text_color="red")
            return

        data = load_data()
        data[site] = {"username": user, "password": pwd, "category": cat}
        save_data(data)
        win.destroy()
        refresh_callback()

    def cancel_entry():
        win.destroy()

    btn_frame = ctk.CTkFrame(win)
    btn_frame.pack(pady=20)

    ctk.CTkButton(
        btn_frame, text="üíæ Save Entry", width=120,
        fg_color="#2C7BE5", hover_color="#1A5DB6",
        command=save_entry
    ).grid(row=0, column=0, padx=10)

    ctk.CTkButton(
        btn_frame, text="‚ùå Cancel", width=120,
        fg_color="#AAAAAA", hover_color="#666666",
        command=cancel_entry
    ).grid(row=0, column=1, padx=10)

# ------------------------
# View Password (with re-auth)
# ------------------------
def view_password(site, details, dash):
    auth_win = ctk.CTkToplevel(dash)
    auth_win.title("Authentication Required")
    auth_win.geometry("300x180")

    ctk.CTkLabel(auth_win, text="Enter Master Password:", font=("Arial", 14)).pack(pady=15)
    entry_master = ctk.CTkEntry(auth_win, show="*", width=220)
    entry_master.pack(pady=5)

    def check_master(event=None):
        if entry_master.get() == MASTER_PASSWORD:
            auth_win.destroy()
            p = details["password"]

            popup = ctk.CTkToplevel(dash)
            popup.title(f"Password for {site}")
            popup.geometry("350x200")

            ctk.CTkLabel(popup, text=f"üîë {site} Password:", font=("Arial", 14, "bold")).pack(pady=10)

            entry = ctk.CTkEntry(popup, width=240, show="*")
            entry.insert(0, p)
            entry.pack(pady=5)

            def toggle_show():
                if entry.cget("show") == "*":
                    entry.configure(show="")
                    btn_toggle.configure(text="üôà Hide")
                else:
                    entry.configure(show="*")
                    btn_toggle.configure(text="üëÅ Show")

            btn_toggle = ctk.CTkButton(popup, text="üëÅ Show", width=80, command=toggle_show)
            btn_toggle.pack(pady=5)

            def copy_to_clipboard():
                pyperclip.copy(p)

            ctk.CTkButton(popup, text="üìã Copy to Clipboard", command=copy_to_clipboard).pack(pady=10)
        else:
            ctk.CTkLabel(auth_win, text="‚ùå Wrong Master Password!", text_color="red").pack(pady=5)

    ctk.CTkButton(auth_win, text="Unlock", command=check_master).pack(pady=10)
    auth_win.bind('<Return>', check_master)

# ------------------------
# Dashboard
# ------------------------
def open_dashboard(root):
    root.destroy()
    dash = ctk.CTk()
    dash.title("üîê SecureDrive - Password Manager")
    dash.geometry("600x400")

    title = ctk.CTkLabel(dash, text="üîê SecureDrive Dashboard", font=("Arial", 20, "bold"))
    title.pack(pady=15)

    frame = ctk.CTkFrame(dash)
    frame.pack(fill="both", expand=True, padx=20, pady=20)

    def refresh():
        for widget in frame.winfo_children():
            widget.destroy()

        data = load_data()
        if not data:
            ctk.CTkLabel(frame, text="No saved passwords yet.", font=("Arial", 14)).pack(pady=20)
        else:
            for site, details in data.items():
                row = ctk.CTkFrame(frame)
                row.pack(fill="x", pady=5)

                ctk.CTkLabel(row, text=f"{site} ({details.get('category', 'General')})", anchor="w").pack(side="left", padx=10)

                ctk.CTkButton(row, text="View", width=60, command=lambda s=site, d=details: view_password(s, d, dash)).pack(side="right", padx=5)

    refresh()

    ctk.CTkButton(dash, text="‚ûï Add Entry", command=lambda: add_password(dash, refresh)).pack(pady=10)

    dash.mainloop()

# ------------------------
# Master Login Screen
# ------------------------
def login_screen():
    root = ctk.CTk()
    root.title("üîê SecureDrive Login")
    root.geometry("350x220")

    ctk.CTkLabel(root, text="Enter Master Password", font=("Arial", 16)).pack(pady=20)
    entry = ctk.CTkEntry(root, show="*", width=220)
    entry.pack(pady=10)

    msg = ctk.CTkLabel(root, text="")
    msg.pack()

    def check_login(event=None):
        if entry.get() == MASTER_PASSWORD:
            open_dashboard(root)
        else:
            msg.configure(text="‚ùå Incorrect Password", text_color="red")

    ctk.CTkButton(root, text="Login", command=check_login).pack(pady=15)
    root.bind('<Return>', check_login)  # press Enter to login

    root.mainloop()

# ------------------------
# Run App
# ------------------------
if __name__ == "__main__":
    ctk.set_appearance_mode("dark")
    ctk.set_default_color_theme("blue")
    login_screen()

